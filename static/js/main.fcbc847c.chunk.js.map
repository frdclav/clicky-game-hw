{"version":3,"sources":["components/Piece/index.js","components/Score/index.js","components/MainBoard/index.js","App.js","serviceWorker.js","index.js"],"names":["Piece","props","role","className","onClick","click","style","backgroundImage","imgUrl","width","height","Score","message","score","topScore","MainBoard","useState","mscore","setScore","mtopScore","setTopScore","mmessage","setMessage","clickedPieces","setClickedPieces","clickPiece","id","console","log","includes","newArr","concat","imageUrl","map","piece","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"gQAeeA,EAbD,SAACC,GAIX,OACI,yBAAKC,KAAK,MAAMC,UAAU,iBAAiBC,QAASH,EAAMI,MAAOC,MAAO,CACpEC,gBAAgB,QAAD,OAAUN,EAAMO,OAAhB,MAA4BC,MAAO,IAAKC,OAAQ,QCI5DC,EAVD,SAACV,GAGX,MACI,CAAC,kCAAQA,EAAMW,QAAd,KACD,yCAAeX,EAAMY,MAArB,iBAA0CZ,EAAMa,YCwFzCC,EA1FG,WACd,IADoB,EAwCOC,mBAAS,GAxChB,mBAwCbC,EAxCa,KAwCLC,EAxCK,OAyCaF,mBAAS,GAzCtB,mBAyCbG,EAzCa,KAyCFC,EAzCE,OA0CWJ,mBAAS,4BA1CpB,mBA0CbK,EA1Ca,KA0CHC,EA1CG,OA2CsBN,mBAAS,IA3C/B,mBA2CbO,EA3Ca,KA2CEC,EA3CF,KA2DdC,EAAa,SAACC,GAEhB,GADAC,QAAQC,IAAI,gBAAiBL,EAAe,KAAMG,EAAIH,EAAcM,SAASH,IACzEH,EAAcM,SAASH,GAP3BR,EAAS,GACTI,EAAW,wBACXE,EAAiB,QAOV,CACH,IAAIM,EAASP,EAAcQ,OAAO,CAACL,IACnCC,QAAQC,IAAIE,GACZN,EAAiBM,GApBjBb,IAAWE,GACXC,EAAYH,EAAS,GAEzBC,EAASD,EAAS,GAElBK,EAAW,sBAmBf,MACI,CAAC,yBAAKnB,UAAU,qCACZ,0BAAMA,UAAU,gBAAhB,eACA,kBAAC,EAAD,CAAOU,MAAOI,EAAQH,SAAUK,EAAWP,QAASS,KAExD,4BAAQlB,UAAU,aACd,wBAAIA,UAAU,yBAAd,gBACA,uBAAGA,UAAU,oBAAb,8EAEJ,yBAAKA,UAAU,qDA9EJ,CACX,CACIuB,GAAI,EACJM,SAAS,sCACV,CACCN,GAAI,EACJM,SAAS,sCACV,CACCN,GAAI,EACJM,SAAS,sCACV,CACCN,GAAI,EACJM,SAAS,sCACV,CACCN,GAAI,EACJM,SAAS,sCACV,CACCN,GAAI,EACJM,SAAS,sCACV,CACCN,GAAI,EACJM,SAAS,sCACV,CACCN,GAAI,EACJM,SAAS,sCACV,CACCN,GAAI,EACJM,SAAS,sCACV,CACCN,GAAI,GACJM,SAAS,sCACV,CACCN,GAAI,GACJM,SAAS,sCACV,CACCN,GAAI,GACJM,SAAS,uCA4CEC,KAAI,SAAAC,GAAK,OAAI,kBAAC,EAAD,CAAOC,IAAKD,EAAMR,GAAIlB,OAAQ0B,EAAMF,SAAU3B,MAAO,kBAAMoB,EAAWS,EAAMR,aC5EjGU,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMzC,c","file":"static/js/main.fcbc847c.chunk.js","sourcesContent":["import React from 'react'\n\nconst Piece = (props) => {\n\n\n\n    return (\n        <div role=\"img\" className='click-item m-3' onClick={props.click} style={{\n            backgroundImage: `url(\"${props.imgUrl}\")`, width: 200, height: 200\n        }}>\n\n        </div >\n    )\n}\n\nexport default Piece\n","import React from 'react'\n\nconst Score = (props) => {\n\n\n    return (\n        [<span> {props.message} </span>,\n        <span> Score: {props.score} | Top Score: {props.topScore}</span>]\n\n    )\n}\n\nexport default Score\n","import React, { useState } from 'react'\nimport Piece from '../Piece'\nimport Score from '../Score'\n\n\nconst MainBoard = () => {\n    const pieces = [\n        {\n            id: 1,\n            imageUrl: `https://www.fillmurray.com/200/200`\n        }, {\n            id: 2,\n            imageUrl: `https://www.fillmurray.com/200/200`\n        }, {\n            id: 3,\n            imageUrl: `https://www.fillmurray.com/200/200`\n        }, {\n            id: 4,\n            imageUrl: `https://www.fillmurray.com/200/200`\n        }, {\n            id: 5,\n            imageUrl: `https://www.fillmurray.com/200/200`\n        }, {\n            id: 6,\n            imageUrl: `https://www.fillmurray.com/200/200`\n        }, {\n            id: 7,\n            imageUrl: `https://www.fillmurray.com/200/200`\n        }, {\n            id: 8,\n            imageUrl: `https://www.fillmurray.com/200/200`\n        }, {\n            id: 9,\n            imageUrl: `https://www.fillmurray.com/200/200`\n        }, {\n            id: 10,\n            imageUrl: `https://www.fillmurray.com/200/200`\n        }, {\n            id: 11,\n            imageUrl: `https://www.fillmurray.com/200/200`\n        }, {\n            id: 12,\n            imageUrl: `https://www.fillmurray.com/200/200`\n        },\n    ]\n    const [mscore, setScore] = useState(0);\n    const [mtopScore, setTopScore] = useState(0);\n    const [mmessage, setMessage] = useState(`Click an image to begin!`);\n    const [clickedPieces, setClickedPieces] = useState([]);\n\n    const increaseScore = () => {\n        if (mscore === mtopScore) {\n            setTopScore(mscore + 1)\n        }\n        setScore(mscore + 1);\n\n        setMessage(`You got a point!`)\n    }\n    const resetScore = () => {\n        setScore(0);\n        setMessage(`You clicked wrong...`)\n        setClickedPieces([]);\n    }\n\n    const clickPiece = (id) => {\n        console.log('clickedPieces', clickedPieces, 'id', id, clickedPieces.includes(id))\n        if (clickedPieces.includes(id)) {\n            resetScore();\n        } else {\n            let newArr = clickedPieces.concat([id])\n            console.log(newArr)\n            setClickedPieces(newArr)\n            increaseScore();\n        }\n    }\n    return (\n        [<nav className='navbar navbar-light  border-dark ' >\n            <span className='navbar-brand'>Clicky Game</span>\n            <Score score={mscore} topScore={mtopScore} message={mmessage} />\n        </nav>,\n        <header className='jumbotron'>\n            <h1 className='display-4 text-center'>Clicky Game!</h1>\n            <p className='lead text-center'> Click on an image to earn points, but don't click on any more than once!</p>\n        </header>,\n        <div className='container d-flex flex-wrap justify-content-center'>\n            {\n                pieces.map(piece => <Piece key={piece.id} imgUrl={piece.imageUrl} click={() => clickPiece(piece.id)} />)\n            }\n\n\n\n        </div>]\n    )\n}\n\nexport default MainBoard\n","import React from 'react';\nimport './App.css';\nimport MainBoard from './components/MainBoard';\n\nfunction App() {\n  return (\n    <MainBoard />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}